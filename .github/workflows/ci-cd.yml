name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3
        run: |
          minio server /data --console-address ":9001"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for services
      run: |
        # Wait for MongoDB
        timeout 60 bash -c 'until mongosh --eval "print(\"MongoDB is ready\")" > /dev/null 2>&1; do sleep 1; done'
        
        # Wait for MinIO
        timeout 60 bash -c 'until curl -f http://localhost:9000/minio/health/live > /dev/null 2>&1; do sleep 1; done'

    - name: Run backend tests
      working-directory: ./backend
      env:
        DATABASE_URL: mongodb://localhost:27017/test_db
        MINIO_URL: localhost:9000
        MINIO_ACCESS_KEY: minioadmin
        MINIO_SECRET_KEY: minioadmin
        BUCKET_NAME: test-files
      run: |
        pytest tests/ -v --tb=short

    - name: Run backend linting
      working-directory: ./backend
      run: |
        pip install black flake8
        black --check --diff .
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: ./frontend
      run: |
        npm run lint --if-present

    - name: Run frontend tests
      working-directory: ./frontend
      run: |
        npm test --if-present

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and test Docker images
      run: |
        docker-compose build
        docker-compose up -d
        
        # Wait for services to be ready
        sleep 30
        
        # Test if services are responding
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:5173 || exit 1
        
        docker-compose down

    - name: Push Docker images
      if: github.event_name != 'pull_request'
      run: |
        # Tag and push images (configure as needed)
        docker tag google-drive-clone_backend:latest ${{ secrets.DOCKER_USERNAME }}/google-drive-clone-backend:latest
        docker tag google-drive-clone_frontend:latest ${{ secrets.DOCKER_USERNAME }}/google-drive-clone-frontend:latest
        
        docker push ${{ secrets.DOCKER_USERNAME }}/google-drive-clone-backend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/google-drive-clone-frontend:latest

  security-scan:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: SSH to staging server and run docker-compose up

  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: SSH to production server and run docker-compose up
